package com.cultureoftech.easyexpensetracker.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPENSE".
*/
public class ExpenseDao extends AbstractDao<Expense, Long> {

    public static final String TABLENAME = "EXPENSE";

    /**
     * Properties of entity Expense.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Amount = new Property(3, Double.class, "amount", false, "AMOUNT");
        public final static Property Comments = new Property(4, String.class, "comments", false, "COMMENTS");
        public final static Property ImagePath = new Property(5, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property PayeeId = new Property(6, long.class, "payeeId", false, "PAYEE_ID");
        public final static Property ReportId = new Property(7, long.class, "reportId", false, "REPORT_ID");
    };

    private DaoSession daoSession;

    private Query<Expense> payee_ExpensesQuery;
    private Query<Expense> expenseReport_ExpensesQuery;

    public ExpenseDao(DaoConfig config) {
        super(config);
    }
    
    public ExpenseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPENSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DATE\" INTEGER," + // 2: date
                "\"AMOUNT\" REAL," + // 3: amount
                "\"COMMENTS\" TEXT," + // 4: comments
                "\"IMAGE_PATH\" TEXT," + // 5: imagePath
                "\"PAYEE_ID\" INTEGER NOT NULL ," + // 6: payeeId
                "\"REPORT_ID\" INTEGER NOT NULL );"); // 7: reportId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPENSE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Expense entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(4, amount);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(5, comments);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(6, imagePath);
        }
        stmt.bindLong(7, entity.getPayeeId());
        stmt.bindLong(8, entity.getReportId());
    }

    @Override
    protected void attachEntity(Expense entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Expense readEntity(Cursor cursor, int offset) {
        Expense entity = new Expense( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comments
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imagePath
            cursor.getLong(offset + 6), // payeeId
            cursor.getLong(offset + 7) // reportId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Expense entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setComments(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImagePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPayeeId(cursor.getLong(offset + 6));
        entity.setReportId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Expense entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Expense entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "expenses" to-many relationship of Payee. */
    public List<Expense> _queryPayee_Expenses(long payeeId) {
        synchronized (this) {
            if (payee_ExpensesQuery == null) {
                QueryBuilder<Expense> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PayeeId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                payee_ExpensesQuery = queryBuilder.build();
            }
        }
        Query<Expense> query = payee_ExpensesQuery.forCurrentThread();
        query.setParameter(0, payeeId);
        return query.list();
    }

    /** Internal query to resolve the "expenses" to-many relationship of ExpenseReport. */
    public List<Expense> _queryExpenseReport_Expenses(long reportId) {
        synchronized (this) {
            if (expenseReport_ExpensesQuery == null) {
                QueryBuilder<Expense> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ReportId.eq(null));
                expenseReport_ExpensesQuery = queryBuilder.build();
            }
        }
        Query<Expense> query = expenseReport_ExpensesQuery.forCurrentThread();
        query.setParameter(0, reportId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPayeeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getExpenseReportDao().getAllColumns());
            builder.append(" FROM EXPENSE T");
            builder.append(" LEFT JOIN PAYEE T0 ON T.\"PAYEE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN EXPENSE_REPORT T1 ON T.\"REPORT_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Expense loadCurrentDeep(Cursor cursor, boolean lock) {
        Expense entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Payee payee = loadCurrentOther(daoSession.getPayeeDao(), cursor, offset);
         if(payee != null) {
            entity.setPayee(payee);
        }
        offset += daoSession.getPayeeDao().getAllColumns().length;

        ExpenseReport expenseReport = loadCurrentOther(daoSession.getExpenseReportDao(), cursor, offset);
         if(expenseReport != null) {
            entity.setExpenseReport(expenseReport);
        }

        return entity;    
    }

    public Expense loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Expense> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Expense> list = new ArrayList<Expense>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Expense> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Expense> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
