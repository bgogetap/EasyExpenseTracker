package com.cultureoftech.easyexpensetracker.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPENSE_REPORT".
*/
public class ExpenseReportDao extends AbstractDao<ExpenseReport, Long> {

    public static final String TABLENAME = "EXPENSE_REPORT";

    /**
     * Properties of entity ExpenseReport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property DateSubmitted = new Property(2, java.util.Date.class, "dateSubmitted", false, "DATE_SUBMITTED");
        public final static Property DateReimbursed = new Property(3, java.util.Date.class, "dateReimbursed", false, "DATE_REIMBURSED");
        public final static Property Comments = new Property(4, String.class, "comments", false, "COMMENTS");
    };

    private DaoSession daoSession;


    public ExpenseReportDao(DaoConfig config) {
        super(config);
    }
    
    public ExpenseReportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPENSE_REPORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DATE_SUBMITTED\" INTEGER," + // 2: dateSubmitted
                "\"DATE_REIMBURSED\" INTEGER," + // 3: dateReimbursed
                "\"COMMENTS\" TEXT);"); // 4: comments
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPENSE_REPORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExpenseReport entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date dateSubmitted = entity.getDateSubmitted();
        if (dateSubmitted != null) {
            stmt.bindLong(3, dateSubmitted.getTime());
        }
 
        java.util.Date dateReimbursed = entity.getDateReimbursed();
        if (dateReimbursed != null) {
            stmt.bindLong(4, dateReimbursed.getTime());
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(5, comments);
        }
    }

    @Override
    protected void attachEntity(ExpenseReport entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExpenseReport readEntity(Cursor cursor, int offset) {
        ExpenseReport entity = new ExpenseReport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dateSubmitted
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // dateReimbursed
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // comments
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExpenseReport entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateSubmitted(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDateReimbursed(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setComments(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExpenseReport entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExpenseReport entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
